------------+
Оглавление: +
------------+

Данное руководство описывает:
	1) процесс установки Anaconda;
	2) процесс установка виртуального окружения; 
	3) запуск модели (обучение/тестовый режим прогона);
	4) описание ПО;

-----------------------------+
Пункт 1. Установка окружения +
-----------------------------+
	1.1. Для корректной работы с предоставляемым ПО рекомендуется предварительно установить и 		 настроить рабочую среду со всеми зависимостями;
	
	1.2. Для установки рабочей среды требуется скачать дистрибутив Anaconda:
			wget https://repo.anaconda.com/archive/Anaconda3-2019.10-Linux-x86_64.sh 
		 
		 На данный момент данный дистрибутив является наиболее новым, однако с момент публикации материала ситуацию может измениться.
	
	1.3. После скачивания рекомендуется проверить файл по контрольной сумме
			sha256sum Anaconda3-2019.10-Linux-x86_64.sh
		 
		 Контрольная сумма располагается по адресу: 
			https://docs.anaconda.com/anaconda/install/hashes/lin-3-64/

	1.5. Установка Anaconda происходит с помощью следующей команды:
			bash Anaconda3-2019.10-Linux-x86_64.sh
	
	1.6. Для завершения установки необходимо перезагрузить машину:
			sudo reboot

------------------------------------------+
Пункт 2. Установка виртуального окружения +
------------------------------------------+
	2.1. Изначально необходимо проверить доступные виртуальные окружения в Anaconda. Для этого введите следующую команду:
				 					conda env list.
	Активное виртуальное окружение будет помечено звездочкой (*). Слева вы увидите наименование данного окружения (по умолчанию: base);

	2.2. Следующий шаг подразумевает создание виртуального окружения, которое можно осуществить несколькими способами:

		2.2.1 С помощью .yml файла, содержащим всю информацию о среде. Выполнить установку можно с помощью следующей команды:
							conda env create -f SomEnvironment.yml
 
		2.2.2 Если способ выше не сработал, то необходимо вручную создать виртуальное окружение. Для этого необходимо выполнять следующую команду: 
							conda create -n <NameOfEnv> [packeges,]
		
		Например, для создания рабочей среды для проекта нужно задать следующую конфигурацию:
							conda create -n SomEnv python=3.6 pandas numpy scikit-learn 
	
	2.3. Необходимо активировать виртуальное окружение:
							conda activate <NameOfEnv>

		 Если в шаге 2.2 было создано виртуальное окружение вручную под название SomEnv, то команда будет выглядеть следующим образом:
							conda activate SomEnv

	2.4. Проверить активное виртуальное окружение с помощью команды:
							 conda env list

	2.5. Если в шаге 2.2 было создано виртуальное окружение с помощью пункта 2.2.2, то необходимо дополнительно установить несколько библиотек с помощью pip:
						pip install loguru
						conda install -c conda-forge somoclu


---------------------------------------------------------+
Пункт 3. Запуск модели (обучение/тестовый режим прогона) +
---------------------------------------------------------+
	3.1 Запуск режима обучения осуществляется с помощью скрипта train.py. Для его запуска необходимо находиться в корневой директории проекта. Для запуска скрипта достаточно выполнить следующую команду:
						python train.py

	За более подробным описание работы скрипта см. Пункт 4.1. train.py

	3.2 Запуск режима обучения тестирования (предсказания) осуществляется с помощью скрипта predict.py. Для его запуска необходимо находиться в корневой директории проекта. Для запуска скрипта достаточно выполнить следующую команду:
						python predict.py

	За более подробным описание работы скрипта см. Пункт 4.2. predict.py

---------------------+
Пункт 4. Описание ПО +
---------------------+
	4.1. train.py - является основным скриптом, который предназначен для:
				* загрузки датасета из директории dataset/dataset.csv. Если dataset.csv отсутствует, то происходит сбор данных из директории dataset/data/*, формирование dataset.csv и загрузка данных;  
				* проведение предобработки данных; 
				* разбиение исходного набора данных на обучающую (train) и контрольную (test) выборку;
				* инициализация и обучение модели с параметрами по умолчанию. Изменить параметры можно на этапе инициализации обьекта в train.py. Доступные параметры модели описаны в классе SOM (tools/SOM.py); 
				* предсказание меток для test выборки данных и оценка качества модели по метрикам:
				точность (presicion), полнота (recall), f1 мера( f1 score), количество верных классификаций (accuracy);
				* формирование и сохранение контейнера (tools/pipelines.py), который состоит из:
					- этапа предобработки данных'' 
					- обученной модели.
				Итоговая сохраненная сущность позволяет последовательно предобрабатывать и предсказывать значения с помощью сохраненной модели.

	4.2. predict.py - является основным скриптом для режима предсказания модели. Осуществляет подрузку всех данных (dataset.csv), производит их предобработку и делает предсказания. 

	4.3. functions.py (tools/functions.py) - предоставляет из себя набор функций необходимый для корректной работы приложения. Модуль состоит из следующих функций:
		
		4.3.1. runTimeLogger(function) - декоратор для логирования времени выполнения произвольной функции. Используется для логирования информации об обучении (Som.train()) и предсказания (Som.fit()) модели.

		4.3.2. collect_data(path=None) - формирует датасет из файлов, указанных в аргументе path. По умолчанию использует данные из папки data (dataset/data/.). После сбора данных формирует dataset.csv (исходный датасет) и сохраняется в папку dataset

		4.3.3. test_train_split(X,y,test_size = None) - производит разбиение датасета на обуч. (train) и тест. (test) выборку.

		4.3.4. score(y, preds, probs) - выполняет оценку качества модели с помощью таких метрик, как: accuracy, presicion, recall, f1 score. Аргументы: y - истинные ответы, preds - метки модели, probs - вероятности наступления классов, полученные из модели.

		4.3.5 export_labels(labels, file_name) - сохраняет предсказания (labels) в текстовый файл под указанным названием (file_name). По умолчанию сохраняет в корневую директорию проекта.

	4.4 logger.py (tools/logger.py) - задает конфигурацию логгера.

	4.5 pipelines.py - описывает pipeline для предобработки данных (prep_pipeline), создает контейнер с предобработкой данных и моделью.

	4.6 SOM.py (tools/SOM.py) - класс модели SOM, описываемый архитектурой подходящей для внедрения модели в контейнер pipline. Инициализация:  dim - размерность модели (сетки); epochs - количество эпох обучения. Метод fit(X, y = None) отвечает за обучение модели. Метод predict(X, y = None) выполняет предсказание для обученной модели. Все остальные методы (__calc_treshold, __get_idx) описываются как частные методы (private) и не предназначены для использования за рамками основных методов.